Vamos resolver **cada expressÃ£o** com base nas seguintes declaraÃ§Ãµes em C:

```c
int i = 3;
int j = 5;
int *p = &i;
int *q = &j;
```

---

### ğŸ“˜ ReferÃªncia:

* `p` aponta para `i` â†’ `*p` = `i` = 3
* `q` aponta para `j` â†’ `*q` = `j` = 5
* `&i` Ã© o endereÃ§o de `i`
* `&p` Ã© o endereÃ§o do ponteiro `p`
* `**&p` Ã© uma forma indireta de acessar o valor de `i`

---

### âœ… a) `p == &i`

* `p` foi declarado como `p = &i`, entÃ£o:
* `p == &i` â†’ **`true`** (ou `1` em C)

**ğŸ”¸ Resultado: `1`**

---

### âœ… b) `*p - *q`

* `*p` = valor de `i` = 3
* `*q` = valor de `j` = 5
* `3 - 5 = -2`

**ğŸ”¸ Resultado: `-2`**

---

### âœ… c) `**&p`

* `&p` Ã© o endereÃ§o do ponteiro `p`
* `*(&p)` devolve `p`
* `**&p` = `*p` = valor de `i` = 3

**ğŸ”¸ Resultado: `3`**

---

### âœ… d) `3 * -*p / (*q) + 7`

Vamos por partes:

* `*p = i = 3` â†’ `-*p = -3`
* `*q = j = 5`
* Substituindo:

```
3 * (-3) / 5 + 7
= -9 / 5 + 7
```

Em C, com inteiros, `-9 / 5` = `-1` (divisÃ£o truncada para zero em direÃ§Ã£o ao zero)

* `-1 + 7 = 6`

**ğŸ”¸ Resultado: `6`**

---

### âœ… Resumo Final:

| ExpressÃ£o           | Resultado |
| ------------------- | --------- |
| a) `p == &i`        | `1`       |
| b) `*p - *q`        | `-2`      |
| c) `**&p`           | `3`       |
| d) `3*-*p/(*q) + 7` | `6`       |
